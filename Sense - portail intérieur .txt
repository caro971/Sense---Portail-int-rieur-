<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sense Connect</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Lora:wght@400;700&display=swap" rel="stylesheet">
    
    <!-- React et Babel pour le JSX -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <style>
        /* Configuration des polices et couleurs via Tailwind */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Lato', 'sans-serif'],
                        serif: ['Lora', 'serif'],
                    },
                    colors: {
                        brand: {
                            'gold': '#b29c78',
                            'black': '#333333',
                            'white': '#ffffff',
                        }
                    }
                }
            }
        }

        /* Animation pour l'apparition des pages */
        @keyframes fade-in {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in { animation: fade-in 0.5s ease-out forwards; }
    </style>
</head>
<body class="bg-brand-white font-sans text-brand-black">
    <div id="root"></div>

    <!-- Le code de l'application React -->
    <script type="text/babel" data-type="module">
        // Importez les fonctions Firebase nécessaires depuis les URLs CDN
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
        import { getFirestore, collection, getDocs } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";

        // --- Configuration Firebase ---
        // Vos clés personnelles sont ici.
        const firebaseConfig = {
          apiKey: "AIzaSyCn3MFOYyfkLDoiJrOW-M5KlTcF4dUIleo",
          authDomain: "sense-connect-ab43d.firebaseapp.com",
          projectId: "sense-connect-ab43d",
          storageBucket: "sense-connect-ab43d.appspot.com",
          messagingSenderId: "955030139866",
          appId: "1:955030139866:web:b77513f909a2ba02d3c6e3",
          measurementId: "G-DD7EK41D8V"
        };

        // Initialisez Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        // --- Icônes ---
        const UsersIcon = ({ className }) => (
          <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>
        );
        const VideoIcon = ({ className }) => (
          <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m22 8-6 4 6 4V8Z"/><rect width="14" height="12" x="2" y="6" rx="2" ry="2"/></svg>
        );
        const CalendarIcon = ({ className }) => (
          <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>
        );
        const HomeIcon = ({ className }) => (
            <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>
        );
        const SearchIcon = ({ className }) => (
            <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
        );

        // --- Composants de Carte ---
        const ProfessionalCard = ({ professional }) => (
          <div className="bg-brand-white rounded-lg shadow-md overflow-hidden transform hover:-translate-y-1 transition-transform duration-300 ease-in-out border border-gray-200/50">
            <img className="w-full h-48 object-cover" src={professional.imageUrl} alt={`Portrait de ${professional.name}`} onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/400x400/eeeeee/cccccc?text=Image'; }}/>
            <div className="p-6">
              <h3 className="font-serif text-2xl font-bold text-brand-black">{professional.name}</h3>
              <p className="text-brand-gold font-semibold mt-1">{professional.specialty}</p>
              <p className="text-gray-700 mt-3 text-sm">{professional.bio}</p>
              <button className="mt-4 w-full bg-gray-100 text-brand-gold font-semibold py-2 px-4 rounded-md hover:bg-gray-200 transition-colors duration-200">
                Voir le profil
              </button>
            </div>
          </div>
        );
        const WorkshopCard = ({ workshop }) => (
          <div className="bg-brand-white rounded-lg shadow-md border border-gray-200/50 p-6 flex flex-col">
            <div className="flex-grow">
                <p className="text-sm text-brand-gold font-semibold flex items-center"><CalendarIcon className="w-4 h-4 mr-2" /> {workshop.date}</p>
                <h3 className="font-serif text-2xl font-bold text-brand-black mt-2">{workshop.title}</h3>
                <p className="text-gray-700 mt-1">Animé par <span className="font-semibold">{workshop.facilitator}</span></p>
                <p className="text-gray-700 mt-3 text-sm">{workshop.description}</p>
            </div>
            <div className="mt-4 flex justify-between items-center">
              <span className="text-lg font-bold text-brand-gold">{workshop.price}</span>
              <button className="bg-brand-gold text-white font-bold py-2 px-5 rounded-md hover:bg-[#a18c68] transition-colors duration-300 shadow-sm hover:shadow-md">
                S'inscrire
              </button>
            </div>
          </div>
        );
        const RitualCard = ({ ritual }) => (
          <div className="bg-brand-white rounded-lg shadow-md overflow-hidden transform hover:-translate-y-1 transition-transform duration-300 ease-in-out border border-gray-200/50">
            <div className="relative">
                <img className="w-full h-40 object-cover" src={ritual.thumbnailUrl} alt={`Miniature pour ${ritual.title}`} onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/600x400/eeeeee/cccccc?text=Image'; }}/>
                <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
                    <VideoIcon className="w-12 h-12 text-white opacity-80" />
                </div>
            </div>
            <div className="p-5">
              <h3 className="font-serif text-xl font-bold text-brand-black">{ritual.title}</h3>
              <p className="text-gray-700 mt-2 text-sm">{ritual.description}</p>
            </div>
          </div>
        );

        // --- Hook personnalisé pour récupérer les données ---
        const useFirestoreCollection = (collectionName) => {
            const [data, setData] = React.useState([]);
            const [loading, setLoading] = React.useState(true);
            const [error, setError] = React.useState(null);

            React.useEffect(() => {
                const fetchData = async () => {
                    try {
                        const querySnapshot = await getDocs(collection(db, collectionName));
                        const collectionData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                        setData(collectionData);
                    } catch (err) {
                        setError('Erreur lors du chargement des données. Vérifiez la configuration Firebase et les règles de sécurité.');
                        console.error(err);
                    } finally {
                        setLoading(false);
                    }
                };

                if (firebaseConfig.projectId && firebaseConfig.projectId !== "VOTRE_PROJECT_ID") {
                    fetchData();
                } else {
                    setError("Configuration Firebase manquante.");
                    setLoading(false);
                }
            }, [collectionName]);

            return { data, loading, error };
        };

        // --- Composants de Page ---
        const HomePage = ({ setPage }) => {
            const { data: workshopsData, loading: workshopsLoading } = useFirestoreCollection('workshops');
            const { data: ritualsData, loading: ritualsLoading } = useFirestoreCollection('rituals');

            return (
                <div className="animate-fade-in">
                    <div className="text-center p-8 md:p-12 bg-brand-white rounded-lg shadow-lg border border-gray-200/50">
                        <h1 className="font-serif text-4xl md:text-5xl font-bold text-brand-black">Bienvenue sur <span className="text-brand-gold">Sense Connect</span></h1>
                        <p className="mt-4 text-lg text-gray-700 max-w-2xl mx-auto">Votre espace pour vous connecter, partager et grandir ensemble au sein de la communauté des professionnels du bien-être Sense.</p>
                    </div>
                    <section className="mt-12">
                        <h2 className="font-serif text-3xl font-bold text-brand-black mb-6">Prochains Ateliers</h2>
                        {workshopsLoading ? <p>Chargement...</p> : (
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                                {workshopsData.slice(0, 3).map(workshop => <WorkshopCard key={workshop.id} workshop={workshop} />)}
                            </div>
                        )}
                        <div className="text-center mt-8">
                            <button onClick={() => setPage('ateliers')} className="text-brand-gold font-semibold hover:text-[#a18c68] transition-colors">Voir tous les ateliers &rarr;</button>
                        </div>
                    </section>
                    <section className="mt-12">
                        <h2 className="font-serif text-3xl font-bold text-brand-black mb-6">Rituels à la Une</h2>
                        {ritualsLoading ? <p>Chargement...</p> : (
                            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
                                {ritualsData.slice(0, 4).map(ritual => <RitualCard key={ritual.id} ritual={ritual} />)}
                            </div>
                        )}
                        <div className="text-center mt-8">
                            <button onClick={() => setPage('rituels')} className="text-brand-gold font-semibold hover:text-[#a18c68] transition-colors">Explorer tous les rituels &rarr;</button>
                        </div>
                    </section>
                </div>
            );
        };

        const ProfessionalsPage = () => {
            const { data: professionalsData, loading, error } = useFirestoreCollection('professionals');
            const [searchTerm, setSearchTerm] = React.useState('');
            const filteredProfessionals = React.useMemo(() => 
                professionalsData.filter(p =>
                    (p.name && p.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
                    (p.specialty && p.specialty.toLowerCase().includes(searchTerm.toLowerCase()))
                ), [searchTerm, professionalsData]);

            if (loading) return <p className="text-center">Chargement des professionnels...</p>;
            if (error) return <p className="text-center text-red-500">{error}</p>;

            return (
                <div className="animate-fade-in">
                    <h1 className="font-serif text-4xl font-bold text-brand-black mb-2">Nos Professionnels</h1>
                    <p className="text-lg text-gray-700 mb-8">Découvrez et connectez-vous avec les experts du réseau Sense.</p>
                    <div className="relative mb-8">
                        <input type="text" placeholder="Rechercher par nom ou spécialité..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full p-4 pl-12 text-lg border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-gold/50 focus:border-brand-gold transition-shadow" />
                        <SearchIcon className="absolute left-4 top-1/2 -translate-y-1/2 w-6 h-6 text-gray-400" />
                    </div>
                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {filteredProfessionals.map(pro => <ProfessionalCard key={pro.id} professional={pro} />)}
                    </div>
                </div>
            );
        };

        const WorkshopsPage = () => {
            const { data: workshopsData, loading, error } = useFirestoreCollection('workshops');
            if (loading) return <p className="text-center">Chargement des ateliers...</p>;
            if (error) return <p className="text-center text-red-500">{error}</p>;
            return (
                <div className="animate-fade-in">
                    <h1 className="font-serif text-4xl font-bold text-brand-black mb-2">Ateliers en Ligne</h1>
                    <p className="text-lg text-gray-700 mb-8">Participez à des ateliers interactifs pour approfondir vos connaissances et pratiques.</p>
                    <div className="grid md:grid-cols-1 lg:grid-cols-2 gap-8">
                        {workshopsData.map(workshop => <WorkshopCard key={workshop.id} workshop={workshop} />)}
                    </div>
                </div>
            );
        };

        const RitualsPage = () => {
            const { data: ritualsData, loading, error } = useFirestoreCollection('rituals');
            if (loading) return <p className="text-center">Chargement des rituels...</p>;
            if (error) return <p className="text-center text-red-500">{error}</p>;
            return (
                <div className="animate-fade-in">
                    <h1 className="font-serif text-4xl font-bold text-brand-black mb-2">Bibliothèque de Rituels</h1>
                    <p className="text-lg text-gray-700 mb-8">Accédez à des vidéos de pratiques de bien-être à réaliser à votre rythme.</p>
                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {ritualsData.map(ritual => <RitualCard key={ritual.id} ritual={ritual} />)}
                    </div>
                </div>
            );
        };

        // --- Composant Principal ---
        const App = () => {
            const [page, setPage] = React.useState('accueil');
            const renderPage = () => {
                switch (page) {
                    case 'professionnels': return <ProfessionalsPage />;
                    case 'ateliers': return <WorkshopsPage />;
                    case 'rituels': return <RitualsPage />;
                    case 'accueil': default: return <HomePage setPage={setPage} />;
                }
            };

            const NavLink = ({ pageName, icon, children }) => {
                const isActive = page === pageName;
                return (
                    <button onClick={() => setPage(pageName)} className={`flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors duration-200 ${isActive ? 'bg-brand-gold/10 text-brand-gold' : 'text-gray-700 hover:bg-gray-200'}`}>
                        {React.cloneElement(icon, { className: "w-5 h-5 mr-3" })}
                        {children}
                    </button>
                );
            }

            return (
                <React.Fragment>
                    <header className="bg-brand-white/80 backdrop-blur-lg sticky top-0 z-10 border-b border-gray-200">
                        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="flex items-center justify-between h-20">
                                <div className="font-serif text-2xl font-bold text-brand-black">Sense <span className="text-brand-gold">Connect</span></div>
                                <nav className="hidden md:flex items-center space-x-2">
                                    <NavLink pageName="accueil" icon={<HomeIcon />}>Accueil</NavLink>
                                    <NavLink pageName="professionnels" icon={<UsersIcon />}>Professionnels</NavLink>
                                    <NavLink pageName="ateliers" icon={<CalendarIcon />}>Ateliers</NavLink>
                                    <NavLink pageName="rituels" icon={<VideoIcon />}>Rituels</NavLink>
                                </nav>
                                <div className="flex items-center">
                                    <button className="bg-brand-gold text-white font-bold py-2 px-4 rounded-md hover:bg-[#a18c68] transition-colors duration-300">Se connecter</button>
                                </div>
                            </div>
                        </div>
                    </header>
                    <main className="container mx-auto p-4 sm:p-6 lg:p-8">{renderPage()}</main>
                    <nav className="md:hidden fixed bottom-0 left-0 right-0 bg-brand-white border-t border-gray-200 flex justify-around p-2">
                        <button onClick={() => setPage('accueil')} className={`flex flex-col items-center text-xs p-2 rounded-lg ${page === 'accueil' ? 'text-brand-gold' : 'text-gray-500'}`}><HomeIcon className="w-6 h-6 mb-1" />Accueil</button>
                        <button onClick={() => setPage('professionnels')} className={`flex flex-col items-center text-xs p-2 rounded-lg ${page === 'professionnels' ? 'text-brand-gold' : 'text-gray-500'}`}><UsersIcon className="w-6 h-6 mb-1" />Pros</button>
                        <button onClick={() => setPage('ateliers')} className={`flex flex-col items-center text-xs p-2 rounded-lg ${page === 'ateliers' ? 'text-brand-gold' : 'text-gray-500'}`}><CalendarIcon className="w-6 h-6 mb-1" />Ateliers</button>
                        <button onClick={() => setPage('rituels')} className={`flex flex-col items-center text-xs p-2 rounded-lg ${page === 'rituels' ? 'text-brand-gold' : 'text-gray-500'}`}><VideoIcon className="w-6 h-6 mb-1" />Rituels</button>
                    </nav>
                    <footer className="bg-brand-white mt-12 border-t border-gray-200 pb-20 md:pb-0">
                        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 text-center text-gray-500">
                            <p>&copy; {new Date().getFullYear()} Sense France. Tous droits réservés.</p>
                            <p className="text-sm mt-1">Plateforme Sense Connect</p>
                        </div>
                    </footer>
                </React.Fragment>
            );
        }

        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<App />);
    </script>
</body>
</html>


